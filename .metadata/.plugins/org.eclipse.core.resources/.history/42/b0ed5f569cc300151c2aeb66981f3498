/**
 * 
 */
package securemessages.encryption.main;

import java.util.HashMap;
import java.util.Map;

/**
 * The purpose of this class is to override the aski table and replace it with
 * one that will be easier to handle.<br>
 * It also handles all of the multi used functions and objects
 * 
 * @author Joshua
 * 
 */
public class Constants {

	/**
	 * This is a hashmap of characters to integers.<br>
	 * This comment is to help remind future developers that it should be
	 * characters! not strings!
	 */
	public static HashMap<Character, Integer> textMap = new HashMap<Character, Integer>();
	static {
		textMap.put('a', 0);
		textMap.put('b', 1);
		textMap.put('c', 2);
		textMap.put('d', 3);
		textMap.put('e', 4);
		textMap.put('f', 5);
		textMap.put('g', 6);
		textMap.put('h', 7);
		textMap.put('i', 8);
		textMap.put('j', 9);
		textMap.put('k', 10);
		textMap.put('l', 11);
		textMap.put('m', 12);
		textMap.put('n', 13);
		textMap.put('o', 14);
		textMap.put('p', 15);
		textMap.put('q', 16);
		textMap.put('r', 17);
		textMap.put('s', 18);
		textMap.put('t', 19);
		textMap.put('u', 20);
		textMap.put('v', 21);
		textMap.put('w', 22);
		textMap.put('x', 23);
		textMap.put('y', 24);
		textMap.put('z', 25);
		textMap.put('A', 26);
		textMap.put('B', 27);
		textMap.put('C', 28);
		textMap.put('D', 29);
		textMap.put('E', 30);
		textMap.put('F', 31);
		textMap.put('G', 32);
		textMap.put('H', 33);
		textMap.put('I', 34);
		textMap.put('J', 35);
		textMap.put('K', 36);
		textMap.put('L', 37);
		textMap.put('M', 38);
		textMap.put('N', 39);
		textMap.put('O', 40);
		textMap.put('P', 41);
		textMap.put('Q', 42);
		textMap.put('R', 43);
		textMap.put('S', 44);
		textMap.put('T', 45);
		textMap.put('U', 46);
		textMap.put('V', 47);
		textMap.put('W', 48);
		textMap.put('X', 49);
		textMap.put('Y', 50);
		textMap.put('Z', 51);
		textMap.put(' ', 52);
		textMap.put('!', 53);
		textMap.put('@', 54);
		textMap.put('#', 55);
		textMap.put('$', 56);
		textMap.put('%', 57);
		textMap.put('^', 58);
		textMap.put('&', 59);
		textMap.put('*', 60);
		textMap.put('(', 61);
		textMap.put(')', 62);
		textMap.put('-', 63);
		textMap.put('_', 64);
		textMap.put('=', 65);
		textMap.put('+', 66);
		textMap.put('`', 67);
		textMap.put('~', 68);
		textMap.put('[', 69);
		textMap.put('{', 70);
		textMap.put(']', 71);
		textMap.put('}', 72);
		textMap.put('\\', 73);
		textMap.put(';', 74);
		textMap.put(':', 75);
		textMap.put('"', 76);
		textMap.put('\'', 77);
		textMap.put(',', 78);
		textMap.put('<', 79);
		textMap.put('.', 80);
		textMap.put('>', 81);
		textMap.put('/', 82);
		textMap.put('?', 83);
		textMap.put('0', 84);
		textMap.put('1', 85);
		textMap.put('2', 86);
		textMap.put('3', 87);
		textMap.put('4', 88);
		textMap.put('5', 89);
		textMap.put('6', 90);
		textMap.put('7', 91);
		textMap.put('8', 92);
		textMap.put('9', 93);
	}

	/**
	 * IntegerMap is the reverse of textMap. It takes the corresponding integer
	 * and gives its character value.
	 */
	public static HashMap<Integer, Character> integerMap = new HashMap<Integer, Character>();
	static {
		for (int i = 0; i < textMap.size(); i++) {
			integerMap.put(i, getKeyFromValue(textMap, i));
		}
	}

	public static Object getKeyFromValue(Map hm, Object value) {
		for (Object object : hm.keySet()) {
			if (hm.get(object).equals(value)) {
				return object;
			}
		}
		return null;
	}
}
