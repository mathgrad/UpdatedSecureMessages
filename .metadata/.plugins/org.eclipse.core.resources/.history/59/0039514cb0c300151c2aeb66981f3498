/**
 * 
 */
package securemessages.encryption.main;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * The purpose of this class is to override the aski table and replace it with
 * one that will be easier to handle.<br>
 * It also handles all of the multi used functions and objects
 * 
 * @author Joshua
 * 
 */
public class Constants {

	/**
	 * This is a hashmap of characters to integers.<br>
	 * This comment is to help remind future developers that it should be
	 * characters! not strings!
	 */
	public static HashMap<Character, Integer> textMap = new HashMap<Character, Integer>();
	static {
		textMap.put('a', 0);
		textMap.put('b', 1);
		textMap.put('c', 2);
		textMap.put('d', 3);
		textMap.put('e', 4);
		textMap.put('f', 5);
		textMap.put('g', 6);
		textMap.put('h', 7);
		textMap.put('i', 8);
		textMap.put('j', 9);
		textMap.put('k', 10);
		textMap.put('l', 11);
		textMap.put('m', 12);
		textMap.put('n', 13);
		textMap.put('o', 14);
		textMap.put('p', 15);
		textMap.put('q', 16);
		textMap.put('r', 17);
		textMap.put('s', 18);
		textMap.put('t', 19);
		textMap.put('u', 20);
		textMap.put('v', 21);
		textMap.put('w', 22);
		textMap.put('x', 23);
		textMap.put('y', 24);
		textMap.put('z', 25);
		textMap.put('A', 26);
		textMap.put('B', 27);
		textMap.put('C', 28);
		textMap.put('D', 29);
		textMap.put('E', 30);
		textMap.put('F', 31);
		textMap.put('G', 32);
		textMap.put('H', 33);
		textMap.put('I', 34);
		textMap.put('J', 35);
		textMap.put('K', 36);
		textMap.put('L', 37);
		textMap.put('M', 38);
		textMap.put('N', 39);
		textMap.put('O', 40);
		textMap.put('P', 41);
		textMap.put('Q', 42);
		textMap.put('R', 43);
		textMap.put('S', 44);
		textMap.put('T', 45);
		textMap.put('U', 46);
		textMap.put('V', 47);
		textMap.put('W', 48);
		textMap.put('X', 49);
		textMap.put('Y', 50);
		textMap.put('Z', 51);
		textMap.put(' ', 52);
		textMap.put('!', 53);
		textMap.put('@', 54);
		textMap.put('#', 55);
		textMap.put('$', 56);
		textMap.put('%', 57);
		textMap.put('^', 58);
		textMap.put('&', 59);
		textMap.put('*', 60);
		textMap.put('(', 61);
		textMap.put(')', 62);
		textMap.put('-', 63);
		textMap.put('_', 64);
		textMap.put('=', 65);
		textMap.put('+', 66);
		textMap.put('`', 67);
		textMap.put('~', 68);
		textMap.put('[', 69);
		textMap.put('{', 70);
		textMap.put(']', 71);
		textMap.put('}', 72);
		textMap.put('\\', 73);
		textMap.put(';', 74);
		textMap.put(':', 75);
		textMap.put('"', 76);
		textMap.put('\'', 77);
		textMap.put(',', 78);
		textMap.put('<', 79);
		textMap.put('.', 80);
		textMap.put('>', 81);
		textMap.put('/', 82);
		textMap.put('?', 83);
		textMap.put('0', 84);
		textMap.put('1', 85);
		textMap.put('2', 86);
		textMap.put('3', 87);
		textMap.put('4', 88);
		textMap.put('5', 89);
		textMap.put('6', 90);
		textMap.put('7', 91);
		textMap.put('8', 92);
		textMap.put('9', 93);
	}

	/**
	 * IntegerMap is the reverse of textMap. It takes the corresponding integer
	 * and gives its character value.
	 */
	public static HashMap<Integer, Character> integerMap = new HashMap<Integer, Character>();
	static {
		for (int index = 0; index < textMap.size(); index++) {
			integerMap.put(index, getKeyFromValue(textMap, index));
		}
	}

	public static ArrayList<Integer> primeList = new ArrayList<Integer>();
	static {
		primeList.add(101);
		primeList.add(103);
		primeList.add(107);
		primeList.add(109);
		primeList.add(113);
		primeList.add(127);
		primeList.add(131);
		primeList.add(137);
		primeList.add(139);
		primeList.add(149);
		primeList.add(151);
		primeList.add(157);
		primeList.add(163);
		primeList.add(167);
		primeList.add(173);
		primeList.add(179);
		primeList.add(181);
		primeList.add(191);
		primeList.add(193);
		primeList.add(197);
		primeList.add(199);
		primeList.add(211);
		primeList.add(223);
		primeList.add(227);
		primeList.add(229);
		primeList.add(233);
		primeList.add(239);
		primeList.add(241);
		primeList.add(251);
		primeList.add(257);
		primeList.add(263);
		primeList.add(269);
		primeList.add(271);
		primeList.add(277);
		primeList.add(281);
		primeList.add(283);
		primeList.add(293);
		primeList.add(307);
		primeList.add(311);
		primeList.add(313);
		primeList.add(317);
		primeList.add(331);
		primeList.add(337);
		primeList.add(347);
		primeList.add(349);
		primeList.add(353);
		primeList.add(359);
		primeList.add(367);
		primeList.add(373);
		primeList.add(379);
		primeList.add(383);
		primeList.add(389);
		primeList.add(397);
		primeList.add(401);
		primeList.add(409);
		primeList.add(419);
		primeList.add(421);
		primeList.add(431);
		primeList.add(433);
		primeList.add(439);
		primeList.add(443);
		primeList.add(449);
		primeList.add(457);
		primeList.add(461);
		primeList.add(463);
		primeList.add(467);
		primeList.add(479);
		primeList.add(487);
		primeList.add(491);
		primeList.add(499);
		primeList.add(503);
		primeList.add(509);
		primeList.add(521);
		primeList.add(523);
		primeList.add(541);
		primeList.add(547);
		primeList.add(557);
		primeList.add(563);
		primeList.add(569);
		primeList.add(571);
		primeList.add(577);
		primeList.add(587);
		primeList.add(593);
		primeList.add(599);
		primeList.add(601);
		primeList.add(607);
		primeList.add(613);
		primeList.add(617);
		primeList.add(619);
		primeList.add(631);
		primeList.add(641);
		primeList.add(643);
		primeList.add(647);
		primeList.add(653);
		primeList.add(659);
		primeList.add(661);
		primeList.add(673);
		primeList.add(677);
		primeList.add(683);
		primeList.add(691);
		primeList.add(701);
		primeList.add(709);
		primeList.add(719);
		primeList.add(727);
		primeList.add(733);
		primeList.add(739);
		primeList.add(743);
		primeList.add(751);
		primeList.add(757);
		primeList.add(761);
		primeList.add(769);
		primeList.add(773);
		primeList.add(787);
		primeList.add(797);
		primeList.add(809);
		primeList.add(811);
		primeList.add(821);
		primeList.add(823);
		primeList.add(827);
		primeList.add(829);
		primeList.add(839);
		primeList.add(853);
		primeList.add(857);
		primeList.add(859);
		primeList.add(863);
		primeList.add(877);
		primeList.add(881);
		primeList.add(883);
		primeList.add(887);
		primeList.add(907);
		primeList.add(911);
		primeList.add(919);
		primeList.add(929);
		primeList.add(937);
		primeList.add(941);
		primeList.add(947);
		primeList.add(953);
		primeList.add(967);
		primeList.add(971);
		primeList.add(977);
		primeList.add(983);
		primeList.add(991);
		primeList.add(997);
		primeList.add(1009);
		primeList.add(1013);
		primeList.add(1019);
		primeList.add(1021);
		primeList.add(1031);
		primeList.add(1033);
		primeList.add(1039);
		primeList.add(1049);
		primeList.add(1051);
		primeList.add(1061);
		primeList.add(1063);
		primeList.add(1069);
		primeList.add(1087);
		primeList.add(1091);
		primeList.add(1093);
		primeList.add(1097);
		primeList.add(1103);
		primeList.add(1109);
		primeList.add(1117);
		primeList.add(1123);
		primeList.add(1129);
		primeList.add(1151);
		primeList.add(1153);
		primeList.add(1163);
		primeList.add(1171);
		primeList.add(1181);
		primeList.add(1187);
		primeList.add(1193);
		primeList.add(1201);
		primeList.add(1213);
		primeList.add(1217);
		primeList.add(1223);
		primeList.add(1229);
		primeList.add(1231);
		primeList.add(1237);
		primeList.add(1249);
		primeList.add(1259);
		primeList.add(1277);
		primeList.add(1279);
		primeList.add(1283);
		primeList.add(1289);
		primeList.add(1291);
		primeList.add(1297);
		primeList.add(1301);
		primeList.add(1303);
		primeList.add(1307);
		primeList.add(1319);
		primeList.add(1321);
		primeList.add(1327);
		primeList.add(1361);
		primeList.add(1367);
		primeList.add(1373);
		primeList.add(1381);
		primeList.add(1399);
		primeList.add(1409);
		primeList.add(1423);
		primeList.add(1427);
		primeList.add(1429);
		primeList.add(1433);
	}

	private static Character getKeyFromValue(HashMap<Character, Integer> hm,
			Integer value) {
		for (Character object : hm.keySet()) {
			if (hm.get(object).equals(value)) {
				return object;
			}
		}
		return null;
	}
}
